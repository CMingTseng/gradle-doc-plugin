/*
 * Copyright 2013, The Thymeleaf Project (http://www.thymeleaf.org/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import nz.net.ultraq.lesscss.LessCSSCompiler

import org.apache.tools.ant.filters.*
import org.gradle.api.plugins.jetty.internal.Monitor

import java.text.SimpleDateFormat

/**
 * Gradle build script inspired from the the Thymeleaf Docs project, converts the
 * documentation files, in Markdown format, into HTML and PDF formats.
 *
 * @author Emanuel Rabina
 * @author Sylvain Leroy
 */

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'

ext.dest="build/documentation-release"

/**
 * Product properties
 */

// These two variables should be updated when creating a new version of the docs
project.ext.set('documentDate', new Date().clearTime())
project.documentDate.set(year: 2014, month: Calendar.JULY, date: 2)

project.webAppDirName = "${buildDir}/jetty"

project.ext.conversions = [
	articles:  ['html', 'pdf'],
	manual: ['html', 'ebook', 'pdf']
]

project.ext.srcDir          = file("${buildDir}/tmp")
project.ext.srcDirTemplates = file("${buildDir}/tmp/templates")
project.ext.docTypeNames    = [] as Set
project.ext.docTypes        = [:]

project.ext.docsDir      = file("${projectDir}/docs")
project.ext.outputDir    = file("${buildDir}/site")
project.ext.outputDirDoc    = file("${outputDir}/doc")

project.ext.redirectionsDir      = file("${projectDir}/redirections")


buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'nz.net.ultraq.lesscss:lesscss-compiler:1.0.2'
	}
}

/**
 * Flatten the directory structure of the docs and resources, putting the
 * markdown files at the head of a directory and all resources are
 * subdirectories, needed for some doc types where external resource paths are
 * always relative to the markdown file.
 */
task copyResources() << {

	def scriptsDir   = file("${projectDir}/scripts")
	def stylesDir    = file("${projectDir}/styles")
	def templatesDir = file("${projectDir}/templates")

	// Copy all .md files into the same directory
	fileTree(docsDir) { include '**/*.md' }.each { docFile ->
        docTypeNames.add(docFile.parentFile.name)
		docTypes.put(fileBaseName(docFile), docFile.parentFile.name)
		copy {
			from docFile
			into srcDir
		}
	}

    docTypeNames.each { docTypeName ->
        def imagesDir = file("${docsDir}/${docTypeName}/images")
        copy {
            from imagesDir
            into "${srcDir}/images"
        }
    }

	// Copy all resource directories straight over
    copy {
        from scriptsDir
        into "${srcDir.path}/${scriptsDir.name}"
    }

	// Copy over stylesheets, compiling LessCSS files into CSS
	copy {
		from(stylesDir) {
			exclude '**/*.less'
		}
		into "${srcDir.path}/styles"
	}
	LessCSSCompiler compiler = new LessCSSCompiler()
	fileTree(stylesDir) { include '**/*.less' }.each { lessFile ->
		def lessFileBase = fileBaseName(lessFile)
		compiler.compile(lessFile, file("${srcDir.path}/styles/${lessFileBase}.css"))
	}

	// Preprocess the template files to insert the correct document date and project version
	def documentVersion = new SimpleDateFormat('yyyyMMdd - dd MMMM yyyy', Locale.ENGLISH).format(project.documentDate)
	copy {
		from(templatesDir) {
			filter(ReplaceTokens, tokens: [
					documentVersion: documentVersion,
					projectVersion:  project.version
			])
		}
		into srcDirTemplates
	}

    // Generate output directory structure
    mkdir outputDir
    mkdir outputDirDoc

    // Copy all redirections to their definitive position
    copy {
        from redirectionsDir
        into outputDir
    }


}

/**
 * Generate HTML versions of the Thymeleaf documentation.
 */
task generateDocsHTML(
	dependsOn: copyResources,
	description: "Generate HTML docs from Thymeleaf's markdown docs") << {

	fileTree(srcDir) { include '**/*.md' }.each { docFile ->
		def docFileBase = fileBaseName(docFile)
		def docType     = docTypes.get(docFileBase)

		if (conversions[docType].contains('html')) {
			println "Generating HTML doc for ${docFileBase}..."
			execute([
				"pandoc",
				"--write=html5",
				"--template=" + file("${srcDirTemplates}/${docType}.html"),
				"--toc",
				"--toc-depth=4",
				"--section-divs",
				"--no-highlight",
				"--smart",
				"--output=" + file("${outputDirDoc}/${docFileBase}.html"),
				"${docFile}"
			])
		}
	}

	// Copy over resources needed for the HTML docs
	copy {
		from(srcDir) {
			include 'images/**'
			include 'scripts/**'
			include 'styles/**'
		}
		into outputDirDoc
	}
}

/**
 * Generate e-books of the Thymeleaf documentation.
 */
task generateDocsEbook(
	dependsOn: copyResources,
	description: "Generate e-books from Thymeleaf's markdown docs") << {

	// Currently only limited to tutorials
	fileTree(srcDir) { include '**/*.md' }.each { docFile ->
		def docFileBase = fileBaseName(docFile);
		def docType     = docTypes.get(docFileBase)

		if (conversions[docType].contains('ebook')) {
			println "Generating E-books for ${docFileBase}..."
			execute([
				"pandoc",
				"--write=epub",
				"--template=" + file("${srcDirTemplates}/${docType}.epub"),
				"--toc",
				"--toc-depth=4",
				"--section-divs",
				"--smart",
				"--output=" + file("${outputDirDoc}/${docFileBase}.epub"),
				"${docFile}"
			], srcDir)  // We need to set the working dir in order for pandoc to find images
			execute([
					"ebook-convert",
					file("${outputDirDoc}/${docFileBase}.epub"),
					file("${outputDirDoc}/${docFileBase}.mobi")
			])
		}
	}
}

/**
 * Jetty configuration, including a fix for Jetty not stopping, obtained from
 * the bug report here: http://issues.gradle.org/browse/GRADLE-2263
 */
[jettyRun, jettyStop]*.stopPort = 8081
[jettyRun, jettyStop]*.stopKey  = 'stop'
jettyRun.doLast {

	/* 
	 * THIS IS A WORKAROUND! THE CURRENT VERSION OF THIS TASK DOESN'T START A WATCHER IN DAEMON MODE
	 * 
	 * If starting the monitor fails, it may be because the jetty task was updated to fix this issue
	 * When that happens, we shouldn't need the custom task any more
	 * 
	 * Copied From: AbstractJettyRunTask
	 */
 	if (getStopPort() != null && getStopPort() > 0 && getStopKey() != null) {
		Monitor monitor = new Monitor(getStopPort(), getStopKey(), server.getProxiedObject());
		monitor.start();
	}
}

/**
 * Generate PDF versions of the Thymeleaf documentation.  Uses a Jetty server to
 * host the HTML documents, and wkhtmltopdf which uses the server to read files
 * via the http:// protocol (otherwise the same-origin restriction kicks in, as
 * do some file:// bugs on Windows) and saves them as PDF documents.
 */
task generateDocsPDF(
	dependsOn: generateDocsHTML,
	description: "Generate PDF documents from Thymeleaf's HTML docs") << {

	// Copy over the HTML documents into a directory from which we can host them
	// using the Jetty server
	copy {
		from outputDirDoc
		into webAppDirName
	}

	// Modify the copied HTML docs, removing the Google Analytics script as it
	// blocks the wkhtmltopdf process
	fileTree(webAppDirName) { include '*.html' }.each { docFile ->
		ant.replaceregexp(
			file:    docFile,
			match:   '<!-- Google Analytics script -->.*</script>',
			replace: '',
			flags:   'gis'
		)
	}
    if (getStopPort() != null && getStopPort() > 0 && getStopKey() != null) {
        Monitor monitor = new Monitor(getStopPort(), getStopKey(), server.getProxiedObject());
        monitor.start();
    }
	//jettyRun.daemon = true
//	jettyRun.execute()

	// Generate the PDF documents from the modified HTML documents
	fileTree(webAppDirName) { include '*.html' }.each { docFile ->
		def docFileBase = fileBaseName(docFile);
		def docType     = docTypes.get(docFileBase)

		if (conversions[docType].contains('pdf')) {
			println "Generating PDF doc for ${docFileBase}..."
			execute([
				"wkhtmltopdf",
				"--print-media-type",
				"--dpi",              "150",
				"--margin-bottom",    "15",
				"--footer-spacing",   "5",
				"--footer-font-size", "8",
				"--footer-font-name", "'Open Sans'",
				"--footer-right",     "Page [page] of [topage]",
				"--header-font-name", "'Open Sans'",
				"${buildDir}/jetty/${docFile.name}",
				file("${outputDirDoc}/${docFileBase}.pdf")
			])
		}
	}

	jettyStop.execute()
}

/**
 * Generate HTML, E-book and PDF versions of the Thymeleaf documentation.
 */
task generateDocs(
	dependsOn: [generateDocsHTML, generateDocsEbook, generateDocsPDF],
	description: "Generate HTML, E-book and PDF documents from Thymeleaf's markdown docs") << {
}
    
// package the bundle in a zip
task docpackaging (type:Zip, dependsOn: generateDocs)  {
   logger.info("create Packaging ${dest}/${komeaBaseName}.zip")
   from  project.ext.outputDir
   baseName "komea-documentation-$komeaVersion"

}
    
    

/**
 * Get just the name of the file minus the path and extension.
 * 
 * @param file
 */
def fileBaseName(file) {

	return file.name.replaceFirst(~/\.[^\.]+$/, '')
}

/**
 * Execute the given command and wait for the process to complete.
 * 
 * @param command
 */
def execute(command, workingDir = projectDir) {

	def proc = command.execute(null, workingDir)
	proc.waitForProcessOutput(System.out, System.err)
	if (proc.exitValue() > 0) {
		println "${proc.err.text}"
	}
}

